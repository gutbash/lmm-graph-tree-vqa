run,n_generation,n_variation,n_format,structure,task_type,text_prompt,image_prompt,model_response,extracted_response,expected_response,match,similarity,node_font,node_color,edge_width,task_id,attempt,num_nodes,resolution
1,1,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[27, 23, 89]`","[27, 23, 89]","[27, 23, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[27, 23, 89]\n```","[27, 23, 89]","[27, 23, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[27, 23, 89]\n```","[27, 23, 89]","[27, 23, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[23, 27, 89]\n```","[23, 27, 89]","[23, 27, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[23, 27, 89]`","[23, 27, 89]","[23, 27, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[23, 27, 89]\n```","[23, 27, 89]","[23, 27, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [23, 89, 27]","[23, 89, 27]","[23, 89, 27]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[23, 89, 27]`","[23, 89, 27]","[23, 89, 27]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[23, 89, 27]`","[23, 89, 27]","[23, 89, 27]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[92, 51, 88]`","[92, 51, 88]","[92, 51, 88]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[92, 51, 88]`","[92, 51, 88]","[92, 51, 88]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[92, 51, 88]`","[92, 51, 88]","[92, 51, 88]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[51, 92, 88]\n```","[51, 92, 88]","[51, 92, 88]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[51, 92, 88]\n```","[51, 92, 88]","[51, 92, 88]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [51, 92, 88]","[51, 92, 88]","[51, 92, 88]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[51, 88, 92]`","[51, 88, 92]","[51, 88, 92]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[51, 88, 92]`","[51, 88, 92]","[51, 88, 92]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[51, 88, 92]`","[51, 88, 92]","[51, 88, 92]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [60, 40, 18]","[60, 40, 18]","[60, 40, 18]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[60, 40, 18]\n```","[60, 40, 18]","[60, 40, 18]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[60, 40, 18]\n```","[60, 40, 18]","[60, 40, 18]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[40, 60, 18]\n```","[40, 60, 18]","[40, 60, 18]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[40, 60, 18]\n```","[40, 60, 18]","[40, 60, 18]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[40, 60, 18]\n```","[40, 60, 18]","[40, 60, 18]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[40, 18, 60]\n```","[40, 18, 60]","[40, 18, 60]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[40, 18, 60]`","[40, 18, 60]","[40, 18, 60]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [40, 18, 60]","[40, 18, 60]","[40, 18, 60]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
4,2,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [43, 97, 36, 29, 74, 30]","[43, 97, 36, 29, 74, 30]","[43, 97, 36, 29, 74, 30]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[43, 97, 36, 29, 74, 30]\n```","[43, 97, 36, 29, 74, 30]","[43, 97, 36, 29, 74, 30]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[43, 97, 36, 29, 74, 30]\n```","[43, 97, 36, 29, 74, 30]","[43, 97, 36, 29, 74, 30]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [36, 97, 29, 43, 30, 74]","[36, 97, 29, 43, 30, 74]","[36, 97, 29, 43, 30, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [36, 97, 29, 43, 30, 74]","[36, 97, 29, 43, 30, 74]","[36, 97, 29, 43, 30, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [36, 97, 29, 43, 30, 74]","[36, 97, 29, 43, 30, 74]","[36, 97, 29, 43, 30, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [36, 29, 97, 30, 74, 43]","[36, 29, 97, 30, 74, 43]","[36, 29, 97, 30, 74, 43]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [36, 29, 97, 30, 74, 43]","[36, 29, 97, 30, 74, 43]","[36, 29, 97, 30, 74, 43]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [36, 29, 97, 30, 74, 43]","[36, 29, 97, 30, 74, 43]","[36, 29, 97, 30, 74, 43]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[36, 55, 8, 21, 55, 34]\n```","[36, 55, 8, 21, 55, 34]","[36, 55, 8, 21, 55, 34]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [36, 55, 8, 21, 55, 34]","[36, 55, 8, 21, 55, 34]","[36, 55, 8, 21, 55, 34]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [36, 55, 8, 21, 55, 34]","[36, 55, 8, 21, 55, 34]","[36, 55, 8, 21, 55, 34]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [8, 55, 21, 36, 55, 34]","[8, 55, 21, 36, 55, 34]","[8, 55, 21, 36, 34, 55]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[8, 55, 21, 36, 55, 34]\n```","[8, 55, 21, 36, 55, 34]","[8, 55, 21, 36, 34, 55]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[8, 55, 21, 36, 55, 34]\n```","[8, 55, 21, 36, 55, 34]","[8, 55, 21, 36, 34, 55]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [8, 21, 55, 34, 55, 36]","[8, 21, 55, 34, 55, 36]","[8, 21, 55, 34, 55, 36]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [8, 21, 55, 34, 55, 36]","[8, 21, 55, 34, 55, 36]","[8, 21, 55, 34, 55, 36]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [8, 21, 55, 34, 55, 36]","[8, 21, 55, 34, 55, 36]","[8, 21, 55, 34, 55, 36]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[13, 97, 33, 64, 23, 34]\n```","[13, 97, 33, 64, 23, 34]","[13, 97, 33, 64, 23, 34]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[13, 97, 33, 64, 23, 34]\n```","[13, 97, 33, 64, 23, 34]","[13, 97, 33, 64, 23, 34]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [13, 97, 33, 64, 23, 34]","[13, 97, 33, 64, 23, 34]","[13, 97, 33, 64, 23, 34]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[33, 97, 64, 13, 34, 23]\n```","[33, 97, 64, 13, 34, 23]","[33, 97, 64, 13, 34, 23]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," ```python\n[33, 97, 64, 13, 34, 23]\n```","[33, 97, 64, 13, 34, 23]","[33, 97, 64, 13, 34, 23]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [33, 97, 64, 13, 34, 23]","[33, 97, 64, 13, 34, 23]","[33, 97, 64, 13, 34, 23]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [33, 64, 97, 34, 23, 13]","[33, 64, 97, 34, 23, 13]","[33, 64, 97, 34, 23, 13]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [33, 64, 97, 34, 23, 13]","[33, 64, 97, 34, 23, 13]","[33, 64, 97, 34, 23, 13]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [33, 64, 97, 34, 23, 13]","[33, 64, 97, 34, 23, 13]","[33, 64, 97, 34, 23, 13]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
7,3,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [8, 63, 21, 26, 37, 16, 15, 59, 3]","[8, 63, 21, 26, 37, 16, 15, 59, 3]","[8, 63, 21, 26, 37, 16, 15, 59, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [8, 63, 21, 26, 37, 16, 15, 59, 3]","[8, 63, 21, 26, 37, 16, 15, 59, 3]","[8, 63, 21, 26, 37, 16, 15, 59, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," preorder = [8, 63, 21, 26, 37, 16, 15, 59, 3]","[8, 63, 21, 26, 37, 16, 15, 59, 3]","[8, 63, 21, 26, 37, 16, 15, 59, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [21, 26, 37, 63, 16, 8, 59, 15, 3]","[21, 26, 37, 63, 16, 8, 59, 15, 3]","[26, 21, 37, 63, 16, 8, 59, 15, 3]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," [21, 26, 37, 63, 16, 8, 59, 15, 3]","[21, 26, 37, 63, 16, 8, 59, 15, 3]","[26, 21, 37, 63, 16, 8, 59, 15, 3]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_tree\bit_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1a38c08e-912a-4776-82a1-d111cf357b08.png," `[26, 21, 37, 63, 16, 8, 59, 15, 3]`","[26, 21, 37, 63, 16, 8, 59, 15, 3]","[26, 21, 37, 63, 16, 8, 59, 15, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [26, 37, 21, 16, 63, 59, 3, 15, 8]","[26, 37, 21, 16, 63, 59, 3, 15, 8]","[26, 37, 21, 16, 63, 59, 3, 15, 8]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [26, 37, 21, 16, 63, 59, 3, 15, 8]","[26, 37, 21, 16, 63, 59, 3, 15, 8]","[26, 37, 21, 16, 63, 59, 3, 15, 8]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [26, 37, 21, 16, 63, 59, 3, 15, 8]","[26, 37, 21, 16, 63, 59, 3, 15, 8]","[26, 37, 21, 16, 63, 59, 3, 15, 8]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," preorder = [35, 93, 79, 35, 6, 24, 4, 83, 24]","[35, 93, 79, 35, 6, 24, 4, 83, 24]","[35, 93, 79, 35, 6, 24, 4, 83, 24]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," preorder = [35, 93, 79, 35, 6, 24, 4, 83, 24]","[35, 93, 79, 35, 6, 24, 4, 83, 24]","[35, 93, 79, 35, 6, 24, 4, 83, 24]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," preorder = [35, 93, 79, 35, 6, 24, 4, 83, 24]","[35, 93, 79, 35, 6, 24, 4, 83, 24]","[35, 93, 79, 35, 6, 24, 4, 83, 24]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [79, 35, 6, 93, 24, 35, 4, 83, 24]","[79, 35, 6, 93, 24, 35, 4, 83, 24]","[35, 79, 6, 93, 24, 35, 83, 4, 24]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," `[79, 35, 6, 93, 24, 35, 4, 83, 24]`","[79, 35, 6, 93, 24, 35, 4, 83, 24]","[35, 79, 6, 93, 24, 35, 83, 4, 24]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [79, 35, 6, 93, 24, 35, 4, 83, 24]","[79, 35, 6, 93, 24, 35, 4, 83, 24]","[35, 79, 6, 93, 24, 35, 83, 4, 24]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [6, 35, 79, 24, 93, 83, 24, 4, 35]","[6, 35, 79, 24, 93, 83, 24, 4, 35]","[35, 6, 79, 24, 93, 83, 24, 4, 35]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [6, 35, 79, 24, 93, 83, 24, 4, 35]","[6, 35, 79, 24, 93, 83, 24, 4, 35]","[35, 6, 79, 24, 93, 83, 24, 4, 35]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [6, 35, 79, 24, 93, 83, 24, 4, 35]","[6, 35, 79, 24, 93, 83, 24, 4, 35]","[35, 6, 79, 24, 93, 83, 24, 4, 35]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," preorder = [74, 98, 77, 37, 74, 50, 38, 7, 21]","[74, 98, 77, 37, 74, 50, 38, 7, 21]","[74, 98, 77, 37, 74, 50, 38, 7, 21]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," preorder = [74, 98, 77, 37, 74, 50, 38, 7, 21]","[74, 98, 77, 37, 74, 50, 38, 7, 21]","[74, 98, 77, 37, 74, 50, 38, 7, 21]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," preorder = [74, 98, 77, 37, 74, 50, 38, 7, 21]","[74, 98, 77, 37, 74, 50, 38, 7, 21]","[74, 98, 77, 37, 74, 50, 38, 7, 21]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [37, 77, 74, 98, 50, 74, 38, 7, 21]","[37, 77, 74, 98, 50, 74, 38, 7, 21]","[37, 77, 74, 98, 50, 74, 7, 38, 21]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [37, 77, 74, 98, 50, 74, 38, 7, 21]","[37, 77, 74, 98, 50, 74, 38, 7, 21]","[37, 77, 74, 98, 50, 74, 7, 38, 21]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [37, 74, 77, 98, 50, 74, 38, 7, 21]","[37, 74, 77, 98, 50, 74, 38, 7, 21]","[37, 77, 74, 98, 50, 74, 7, 38, 21]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [37, 74, 77, 50, 98, 7, 21, 38, 74]","[37, 74, 77, 50, 98, 7, 21, 38, 74]","[37, 74, 77, 50, 98, 7, 21, 38, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [37, 74, 77, 50, 98, 7, 21, 38, 74]","[37, 74, 77, 50, 98, 7, 21, 38, 74]","[37, 74, 77, 50, 98, 7, 21, 38, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_tree\bit_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fb6fc0eb-db78-4740-89b9-5be205a8ca62.png," [37, 74, 77, 50, 98, 7, 21, 38, 74]","[37, 74, 77, 50, 98, 7, 21, 38, 74]","[37, 74, 77, 50, 98, 7, 21, 38, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
1,1,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [61, 18, 78]","[61, 18, 78]","[61, 18, 78]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [61, 18, 78]","[61, 18, 78]","[61, 18, 78]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [61, 18, 78]","[61, 18, 78]","[61, 18, 78]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[18, 61, 78]\n```","[18, 61, 78]","[18, 61, 78]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[18, 61, 78]\n```","[18, 61, 78]","[18, 61, 78]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[18, 61, 78]\n```","[18, 61, 78]","[18, 61, 78]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[18, 78, 61]\n```","[18, 78, 61]","[18, 78, 61]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[18, 78, 61]\n```","[18, 78, 61]","[18, 78, 61]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [18, 78, 61]","[18, 78, 61]","[18, 78, 61]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [20, 12, 45]","[20, 12, 45]","[20, 12, 45]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [20, 12, 45]","[20, 12, 45]","[20, 12, 45]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[20, 12, 45]\n```","[20, 12, 45]","[20, 12, 45]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[12, 20, 45]\n```","[12, 20, 45]","[12, 20, 45]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[12, 20, 45]\n```","[12, 20, 45]","[12, 20, 45]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[12, 20, 45]\n```","[12, 20, 45]","[12, 20, 45]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [12, 45, 20]","[12, 45, 20]","[12, 45, 20]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [12, 45, 20]","[12, 45, 20]","[12, 45, 20]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [12, 45, 20]","[12, 45, 20]","[12, 45, 20]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [72, 33, 74]","[72, 33, 74]","[72, 33, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [72, 33, 74]","[72, 33, 74]","[72, 33, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [72, 33, 74]","[72, 33, 74]","[72, 33, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [33, 72, 74]","[33, 72, 74]","[33, 72, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [33, 72, 74]","[33, 72, 74]","[33, 72, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [33, 72, 74]","[33, 72, 74]","[33, 72, 74]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [33, 74, 72]","[33, 74, 72]","[33, 74, 72]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [33, 74, 72]","[33, 74, 72]","[33, 74, 72]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [33, 74, 72]","[33, 74, 72]","[33, 74, 72]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
4,2,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[3, 73, 29, 38, 1]\n```","[3, 73, 29, 38, 1]","[3, 1, 1, 73, 29, 38]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [3, 73, 29, 38, 1]","[3, 73, 29, 38, 1]","[3, 1, 1, 73, 29, 38]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [3, 73, 29, 38, 1]","[3, 73, 29, 38, 1]","[3, 1, 1, 73, 29, 38]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [1, 3, 29, 73, 38]","[1, 3, 29, 73, 38]","[1, 1, 3, 29, 38, 73]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[1, 3, 29, 73, 38]\n```","[1, 3, 29, 73, 38]","[1, 1, 3, 29, 38, 73]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [1, 3, 29, 73, 38]","[1, 3, 29, 73, 38]","[1, 1, 3, 29, 38, 73]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[1, 29, 73, 38, 3]\n```","[1, 29, 73, 38, 3]","[1, 1, 38, 29, 73, 3]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [1, 38, 29, 73, 3]","[1, 38, 29, 73, 3]","[1, 1, 38, 29, 73, 3]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
4,2,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [1, 38, 29, 73, 3]","[1, 38, 29, 73, 3]","[1, 1, 38, 29, 73, 3]",False,0,sans-serif,#fee4b3,1.0,None,3,5,512
5,2,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [65, 57, 11, 29, 38, 66]","[65, 57, 11, 29, 38, 66]","[65, 57, 11, 66, 29, 38]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," `[65, 57, 11, 29, 38, 66]`","[65, 57, 11, 29, 38, 66]","[65, 57, 11, 66, 29, 38]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [65, 57, 11, 29, 66, 38]","[65, 57, 11, 29, 66, 38]","[65, 57, 11, 66, 29, 38]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[11, 57, 29, 65, 66, 38]\n```","[11, 57, 29, 65, 66, 38]","[11, 57, 65, 29, 38, 66]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 57, 29, 38, 65, 66]","[11, 57, 29, 38, 65, 66]","[11, 57, 65, 29, 38, 66]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 57, 29, 65, 66, 38]","[11, 57, 29, 65, 66, 38]","[11, 57, 65, 29, 38, 66]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 57, 29, 38, 66, 65]","[11, 57, 29, 38, 66, 65]","[11, 57, 38, 29, 66, 65]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 57, 29, 38, 66, 65]","[11, 57, 29, 38, 66, 65]","[11, 57, 38, 29, 66, 65]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 57, 29, 38, 66, 65]","[11, 57, 29, 38, 66, 65]","[11, 57, 38, 29, 66, 65]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [81, 27, 20, 84, 89, 86]","[81, 27, 20, 84, 89, 86]","[81, 27, 20, 89, 84, 86]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [81, 27, 20, 84, 89, 86]","[81, 27, 20, 84, 89, 86]","[81, 27, 20, 89, 84, 86]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [81, 27, 20, 84, 89, 86]","[81, 27, 20, 84, 89, 86]","[81, 27, 20, 89, 84, 86]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [20, 27, 81, 84, 86, 89]","[20, 27, 81, 84, 86, 89]","[20, 27, 81, 84, 86, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [20, 27, 81, 84, 86, 89]","[20, 27, 81, 84, 86, 89]","[20, 27, 81, 84, 86, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," ```python\n[20, 27, 81, 84, 86, 89]\n```","[20, 27, 81, 84, 86, 89]","[20, 27, 81, 84, 86, 89]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [20, 27, 84, 86, 89, 81]","[20, 27, 84, 86, 89, 81]","[20, 27, 86, 84, 89, 81]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [20, 27, 84, 86, 89, 81]","[20, 27, 84, 86, 89, 81]","[20, 27, 86, 84, 89, 81]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [20, 27, 84, 86, 89, 81]","[20, 27, 84, 86, 89, 81]","[20, 27, 86, 84, 89, 81]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
7,3,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [53, 32, 11, 13, 12, 71, 96, 98, 99]","[53, 32, 11, 13, 12, 71, 96, 98, 99]","[53, 32, 11, 13, 12, 96, 71, 98, 99]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [53, 32, 11, 13, 12, 71, 96, 98, 99]","[53, 32, 11, 13, 12, 71, 96, 98, 99]","[53, 32, 11, 13, 12, 96, 71, 98, 99]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," preorder = [53, 32, 11, 13, 12, 71, 96, 98, 99]","[53, 32, 11, 13, 12, 71, 96, 98, 99]","[53, 32, 11, 13, 12, 96, 71, 98, 99]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 12, 13, 32, 53, 71, 96, 98, 99]","[11, 12, 13, 32, 53, 71, 96, 98, 99]","[11, 12, 13, 32, 53, 71, 96, 98, 99]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 12, 13, 32, 53, 71, 96, 98, 99]","[11, 12, 13, 32, 53, 71, 96, 98, 99]","[11, 12, 13, 32, 53, 71, 96, 98, 99]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,in_order,"'Provide a single-line python list representing the in-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Inorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Inorder(left->subtree)\n    2. Visit the root.\n    3. Traverse the right subtree, i.e., call Inorder(right->subtree)'",images\binary_search_tree\bst_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-cac949c7-a046-44a7-bdea-715ebe3deaa6.png," [11, 12, 13, 32, 53, 71, 96, 98, 99]","[11, 12, 13, 32, 53, 71, 96, 98, 99]","[11, 12, 13, 32, 53, 71, 96, 98, 99]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [12, 13, 11, 32, 71, 99, 98, 96, 53]","[12, 13, 11, 32, 71, 99, 98, 96, 53]","[12, 13, 11, 32, 71, 99, 98, 96, 53]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [12, 13, 11, 32, 71, 99, 98, 96, 53]","[12, 13, 11, 32, 71, 99, 98, 96, 53]","[12, 13, 11, 32, 71, 99, 98, 96, 53]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [12, 13, 11, 32, 71, 99, 98, 96, 53]","[12, 13, 11, 32, 71, 99, 98, 96, 53]","[12, 13, 11, 32, 71, 99, 98, 96, 53]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," preorder = [67, 44, 26, 33, 31, 73, 89, 93, 99]","[67, 44, 26, 33, 31, 73, 89, 93, 99]","[67, 44, 26, 33, 31, 89, 73, 93, 99]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," preorder = [67, 44, 26, 33, 31, 73, 89, 93, 99]","[67, 44, 26, 33, 31, 73, 89, 93, 99]","[67, 44, 26, 33, 31, 89, 73, 93, 99]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," preorder = [67, 44, 26, 33, 31, 73, 89, 93, 99]","[67, 44, 26, 33, 31, 73, 89, 93, 99]","[67, 44, 26, 33, 31, 89, 73, 93, 99]",False,77.77777777777779,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [26, 31, 33, 44, 67, 73, 89, 93, 99]","[26, 31, 33, 44, 67, 73, 89, 93, 99]","[26, 31, 33, 44, 67, 73, 89, 93, 99]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [26, 31, 33, 44, 67, 73, 89, 93, 99]","[26, 31, 33, 44, 67, 73, 89, 93, 99]","[26, 31, 33, 44, 67, 73, 89, 93, 99]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," ```python\n[26, 31, 33, 44, 67, 73, 89, 93, 99]\n```","[26, 31, 33, 44, 67, 73, 89, 93, 99]","[26, 31, 33, 44, 67, 73, 89, 93, 99]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [31, 33, 26, 44, 73, 67, 89, 93, 99]","[31, 33, 26, 44, 73, 67, 89, 93, 99]","[31, 33, 26, 44, 73, 99, 93, 89, 67]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [31, 33, 26, 44, 73, 67, 89, 93, 99]","[31, 33, 26, 44, 73, 67, 89, 93, 99]","[31, 33, 26, 44, 73, 99, 93, 89, 67]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [31, 33, 26, 44, 73, 67, 89, 93, 99]","[31, 33, 26, 44, 73, 67, 89, 93, 99]","[31, 33, 26, 44, 73, 99, 93, 89, 67]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," preorder = [5, 4, 2, 3, 31, 26, 98, 99]","[5, 4, 2, 3, 31, 26, 98, 99]","[5, 4, 2, 3, 31, 98, 26, 99, 99]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," preorder = [5, 4, 2, 3, 31, 26, 98, 99]","[5, 4, 2, 3, 31, 26, 98, 99]","[5, 4, 2, 3, 31, 98, 26, 99, 99]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,pre_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," preorder = [5, 4, 2, 3, 31, 26, 98, 99]","[5, 4, 2, 3, 31, 26, 98, 99]","[5, 4, 2, 3, 31, 98, 26, 99, 99]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [2, 3, 4, 5, 26, 98, 99, 31]","[2, 3, 4, 5, 26, 98, 99, 31]","[2, 31, 3, 4, 5, 26, 98, 99, 99]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [2, 3, 4, 5, 26, 99, 98, 31]","[2, 3, 4, 5, 26, 99, 98, 31]","[2, 31, 3, 4, 5, 26, 98, 99, 99]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,in_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [2, 3, 4, 5, 26, 99, 98, 31]","[2, 3, 4, 5, 26, 99, 98, 31]","[2, 31, 3, 4, 5, 26, 98, 99, 99]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [2, 3, 31, 4, 26, 5, 98, 99]","[2, 3, 31, 4, 26, 5, 98, 99]","[31, 3, 2, 4, 26, 99, 99, 98, 5]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [2, 3, 31, 4, 26, 5, 98, 99]","[2, 3, 31, 4, 26, 5, 98, 99]","[31, 3, 2, 4, 26, 99, 99, 98, 5]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
9,3,3,1,binary_search_tree,post_order,"'Provide a single-line python list representing the post-order traversal of the binary search tree by following the steps below:\n                             \n    Algorithm Postorder(tree)\n    \n    1. Traverse the left subtree, i.e., call Postorder(left->subtree)\n    2. Traverse the right subtree, i.e., call Postorder(right->subtree)\n    3. Visit the root'",images\binary_search_tree\bst_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6ae857cb-3f56-4adc-937e-cb9ac8ec8d33.png," [2, 3, 31, 4, 26, 5, 99, 98]","[2, 3, 31, 4, 26, 5, 99, 98]","[31, 3, 2, 4, 26, 99, 99, 98, 5]",False,0,sans-serif,#fee4b3,1.0,None,3,8,512
1,1,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\n[1, 2, 3]\n```","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\n[1, 2, 3]\n```","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n```","{1: [2, 3], 2: [1, 3], 3: [1, 2]}","{1: [2, 3], 2: [1, 3], 3: [2, 1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
4,2,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,83.61111111111111,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4], 6: [3]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4], 6: [3]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,73.88888888888889,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,83.61111111111111,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5, 6], 3: [2, 4, 5], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [2, 5]}\n```","{1: [2], 2: [1, 3, 4, 5, 6], 3: [2, 4, 5], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [2, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,82.77777777777779,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,83.61111111111111,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4], 6: [3]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4], 6: [3]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,73.88888888888889,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 6, 4, 5]",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,83.61111111111111,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5, 6], 3: [2, 4, 5], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [2, 5]}\n```","{1: [2], 2: [1, 3, 4, 5, 6], 3: [2, 4, 5], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [2, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,82.77777777777779,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,undirected_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," ```python\ngraph = {1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}\n```","{1: [2], 2: [1, 3, 4, 5], 3: [2, 4, 5, 6], 4: [2, 3, 5], 5: [2, 3, 4, 6], 6: [3, 5]}","{1: [2], 2: [1, 3, 6, 4], 3: [2, 4, 6, 5], 4: [3, 5, 2], 5: [4, 6, 3], 6: [5, 3, 2]}",False,83.61111111111111,sans-serif,#fee4b3,1.0,None,3,6,512
7,3,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 7, 8, 9, 6, 4, 5]","[1, 2, 3, 7, 8, 9, 6, 4, 5]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the undirected graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\undirected_graph\ug_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-1dc1ff2f-4157-494c-aa9d-1cfbe3ac0882.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 8, 9, 6, 4, 5]","[1, 2, 3, 7, 8, 9, 6, 4, 5]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 7, 5, 6, 8, 9]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 6, 5, 4, 8, 9]","[1, 2, 3, 7, 6, 5, 4, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 7, 6, 5, 4, 9, 8]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," [1, 2, 3, 7, 6, 5, 4, 8, 9]","[1, 2, 3, 7, 6, 5, 4, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",False,55.55555555555556,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,undirected_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the undirected graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\undirected_graph\ug_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-56d9006a-a91b-445e-91d3-66d2f2e90d79.png," ```python\ngraph = {1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}\n```","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [3, 6, 8], 8: [7, 9], 9: [8]}","{1: [2], 2: [1, 3], 3: [2, 4, 7], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8, 3], 8: [7, 9], 9: [8]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
1,1,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\n[1, 2, 3]\n```","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
1,1,1,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
2,1,2,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3]","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\n[1, 2, 3]\n```","[1, 2, 3]","[1, 2, 3]",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 3, 2]","[1, 3, 2]","[1, 2, 3]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
3,1,3,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [1]}\n```","{1: [2], 2: [3], 3: [1]}","{1: [2], 2: [3], 3: [1]}",True,100.0,sans-serif,#fee4b3,1.0,None,3,3,512
4,2,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: [4]}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: [4]}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
4,2,1,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
5,2,2,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\n[1, 2, 3, 4, 5, 6]\n```","[1, 2, 3, 4, 5, 6]","[1, 2, 4, 3, 5, 6]",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]","[1, 2, 3, 4, 5, 6]",True,100.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: []}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,50.0,sans-serif,#fee4b3,1.0,None,3,6,512
6,2,3,1,directed_graph,adjacency_list,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," ```python\ngraph = {1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: [4]}\n```","{1: [2], 2: [3], 3: [4], 4: [5, 6], 5: [], 6: [4]}","{1: [2, 4], 2: [3], 3: [4], 4: [5], 5: [6], 6: [4]}",False,66.66666666666666,sans-serif,#fee4b3,1.0,None,3,6,512
7,3,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 4, 5, 3, 6, 7, 8, 9]","[1, 2, 4, 5, 3, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,breadth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,depth_first_search,"'Provide a single-line python list representing the depth-first search of the directed graph starting from the vertex with the smallest value.\n    \n    Algorithm DFS(graph, startVertex)\n\n    1. Initialize a stack S and push startVertex onto S.\n    2. While S is not empty:\n        a. Pop a vertex v from S.\n        b. If v has not been visited:\n            i. Mark v as visited.\n            ii. For each neighbor w of v in graph:\n                - If w has not been visited, push w onto S.'",images\directed_graph\dg_run-7_gen-3_var-1_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-6986fb1f-99f2-484e-8a2b-b0f471c54e29.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [], 4: [5, 6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [], 4: [5, 6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,38.88888888888889,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [6], 4: [5, 6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [6], 4: [5, 6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,38.88888888888889,sans-serif,#fee4b3,1.0,None,3,9,512
7,3,1,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [], 4: [6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [], 4: [6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,35.18518518518518,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [], 4: [5, 6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [], 4: [5, 6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,38.88888888888889,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [6], 4: [], 5: [7], 6: [5], 7: [8], 8: [9], 9: [1]}\n```","{1: [2, 4, 5], 2: [3], 3: [6], 4: [], 5: [7], 6: [5], 7: [8], 8: [9], 9: [1]}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,31.48148148148148,sans-serif,#fee4b3,1.0,None,3,9,512
8,3,2,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [6], 4: [], 5: [6, 7], 6: [], 7: [5], 8: [5], 9: [1, 8]}\n```","{1: [2, 4, 5], 2: [3], 3: [6], 4: [], 5: [6, 7], 6: [], 7: [5], 8: [5], 9: [1, 8]}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,35.18518518518518,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 4, 5, 3, 6, 7, 8, 9]","[1, 2, 4, 5, 3, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 4, 5, 3, 6, 7, 8, 9]","[1, 2, 4, 5, 3, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,33.33333333333333,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,breadth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 4, 3, 5, 6, 7, 8, 9]","[1, 2, 5, 3, 6, 7, 8, 4, 9]",False,44.44444444444444,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,depth_first_search,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," [1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]","[1, 2, 3, 4, 5, 6, 7, 8, 9]",True,100.0,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [], 4: [6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [], 4: [6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,35.18518518518518,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [], 4: [6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [], 4: [6], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,35.18518518518518,sans-serif,#fee4b3,1.0,None,3,9,512
9,3,3,1,directed_graph,adjacency_list,"""Provide a single-line python dictionary representing the adjacency list of the directed graph by following the steps below:\n    \n    1. Initialize a dictionary to represent the graph, with each vertex as a key and its adjacent vertices as a list for the corresponding value.\n    2. For every vertex in the graph, assign an empty list to the dictionary entry for that vertex to hold its adjacent vertices.\n    3. Iterate through all the edges in the graph, represented as pairs (u, v). For each pair, append v to the list of u's adjacent vertices in the dictionary. If the graph is undirected, also append u to v's list.""",images\directed_graph\dg_run-9_gen-3_var-3_fmt-1_thk-10_clr-abe0f9_fnt-sansserif_res-512_idn-fdd61412-dd83-4d0e-b78b-08426224e79c.png," ```python\ngraph = {1: [2, 4, 5], 2: [3], 3: [6], 4: [], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}\n```","{1: [2, 4, 5], 2: [3], 3: [6], 4: [], 5: [6, 7], 6: [], 7: [8], 8: [9], 9: []}","{1: [2, 5], 2: [3], 3: [4], 4: [5, 1], 5: [6, 7, 8], 6: [7, 4], 7: [8, 5], 8: [9, 1, 5], 9: [2]}",False,35.18518518518518,sans-serif,#fee4b3,1.0,None,3,9,512
