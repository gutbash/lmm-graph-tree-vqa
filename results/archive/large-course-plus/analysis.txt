
Top contributing terms for text_prompt_svd_4:
density_bin_3: 0.7071067811865557
num_nodes_8: 1.0169784808800919e-14
num_nodes_4: 1.0121226169960012e-14
num_edges_7: 7.516021876276929e-15
num_nodes_7: 7.326641911814952e-15
num_nodes_5: 4.158902272593598e-15
num_edges_6: 4.007767430954708e-15
density_bin_1: 4.007767430954708e-15
density_bin_2: 4.007767430954708e-15
num_edges_20: 1.8420983126441564e-15

Bottom contributing terms for text_prompt_svd_4:
num_edges_2: -4.29133260580807e-15
num_edges_8: -4.362249934562498e-15
num_edges_4: -4.419702143030354e-15
num_edges_9: -4.419702143030354e-15
num_edges_10: -4.419702143030354e-15
num_edges_12: -4.419702143030354e-15
num_edges_16: -4.419702143030354e-15
num_edges_14: -7.295658290060459e-15
num_nodes_6: -1.0238277788002506e-14
num_nodes_9: -0.7071067811865395
Training Regression Metrics: {'mse': 0.033094844816135914, 'r2': 0.7146146490589671}
Training Classification Metrics: {'accuracy': 0.8735014468788755, 'precision': 0.8126402393418101, 'recall': 0.838996138996139, 'f1': 0.8256079027355624}
Feature importances for Linear Regression:
num_nodes_4: -142576816761.6844
num_nodes_5: -29832938657.4448
num_nodes_6: 89296435569.2661
num_nodes_7: 223860977209.1153
num_nodes_8: 365133063540.1481
num_nodes_9: 574448708802.3876
num_nodes_10: 1015244457900.0383
num_edges_2: -18979115982.5016
num_edges_3: -18979115982.5702
num_edges_4: -56020868514.4709
num_edges_5: -19614445653.0529
num_edges_6: -54194317157.7560
num_edges_7: -45413237911.1316
num_edges_8: -59108621240.9049
num_edges_9: -18432093066.2623
num_edges_10: -58450414486.7275
num_edges_12: -56334633787.2975
num_edges_14: -58556638937.0544
num_edges_16: -54164016079.3838
num_edges_20: -27413691189.5675
num_edges_24: -718509978896.7073
density_bin_1: -467840005996.4124
density_bin_2: -619836678733.9443
density_bin_3: -467244469908.3400
density_bin_4: -262440934524.4060
density_bin_5: -295341376209.7761
density_bin_6: -228784667151.4369
avg_degree_bin_1: -909181405458.0560
avg_degree_bin_2: -208653346250.2915
in_degree_hist_0: -794810082230.1763
in_degree_hist_2: 406603473790.7709
in_degree_hist_3: -805672725785.5349
in_degree_hist_5: -728916882430.6162
in_degree_hist_6: -768615218107.3682
in_degree_hist_7: -720305950296.5619
in_degree_hist_9: -755768764149.9587
out_degree_hist_0: 82363219064.1005
out_degree_hist_2: -746792120632.6809
out_degree_hist_3: 86478382983.2517
out_degree_hist_5: 69044773939.6812
out_degree_hist_6: 81154336194.6864
out_degree_hist_7: 845621118667.5671
out_degree_hist_9: 81191701282.5545
edge_width_1: 985080377622.5031
edge_width_5: 985080377622.5953
img_pca_cmp_0: -0.0694
img_pca_cmp_1: -0.0252
img_pca_cmp_2: -0.0305
img_pca_cmp_3: 0.2310
img_pca_cmp_4: 0.1242
img_pca_cmp_5: -0.0800
img_pca_cmp_6: 0.0283
img_pca_cmp_7: -0.0194
img_pca_cmp_8: 0.0208
img_pca_cmp_9: 0.0153
img_pca_cmp_10: -0.0052
img_pca_cmp_11: -0.0020
img_pca_cmp_12: -0.0474
img_pca_cmp_13: -0.0164
img_pca_cmp_14: 0.0139
img_pca_cmp_15: 0.0193
img_pca_cmp_16: 0.0069
img_pca_cmp_17: 0.0383
img_pca_cmp_18: 0.0006
img_pca_cmp_19: -0.0046
img_pca_cmp_20: -0.0163
img_pca_cmp_21: -0.0089
img_pca_cmp_22: 0.0309
img_pca_cmp_23: -0.0288
img_pca_cmp_24: 0.0106
img_pca_cmp_25: 0.0076
img_pca_cmp_26: -0.0094
img_pca_cmp_27: -0.0060
img_pca_cmp_28: 0.0010
img_pca_cmp_29: 0.0222
img_pca_cmp_30: -0.0125
img_pca_cmp_31: 0.0228
img_pca_cmp_32: -0.0012
img_pca_cmp_33: -0.0187
img_pca_cmp_34: 0.0051
img_pca_cmp_35: -0.0061
img_pca_cmp_36: 0.0283
img_pca_cmp_37: 0.0210
img_pca_cmp_38: -0.0062
img_pca_cmp_39: -0.0007
img_pca_cmp_40: 0.0046
img_pca_cmp_41: 0.0025
img_pca_cmp_42: 0.0087
img_pca_cmp_43: -0.0107
img_pca_cmp_44: 0.0126
img_pca_cmp_45: -0.0191
img_pca_cmp_46: -0.0264
img_pca_cmp_47: 0.0144
img_pca_cmp_48: 0.0136
img_pca_cmp_49: 0.0032
img_pca_cmp_50: -0.0262
img_pca_cmp_51: 0.0114
img_pca_cmp_52: -0.0056
img_pca_cmp_53: 0.0049
img_pca_cmp_54: 0.0079
img_pca_cmp_55: -0.0282
img_pca_cmp_56: 0.0081
img_pca_cmp_57: -0.0115
img_pca_cmp_58: 0.0031
img_pca_cmp_59: -0.0112
img_pca_cmp_60: -0.0117
img_pca_cmp_61: 0.0146
img_pca_cmp_62: -0.0189
img_pca_cmp_63: -0.0027
img_pca_cmp_64: -0.0034
img_pca_cmp_65: -0.0038
img_pca_cmp_66: 0.0075
img_pca_cmp_67: -0.0116
img_pca_cmp_68: 0.0132
img_pca_cmp_69: -0.0150
img_pca_cmp_70: 0.0147
img_pca_cmp_71: 0.0007
img_pca_cmp_72: 0.0008
img_pca_cmp_73: 0.0004
img_pca_cmp_74: 0.0003
img_pca_cmp_75: 0.0135
img_pca_cmp_76: -0.0015
img_pca_cmp_77: -0.0028
img_pca_cmp_78: -0.0104
img_pca_cmp_79: 0.0044
img_pca_cmp_80: -0.0026
img_pca_cmp_81: -0.0069
img_pca_cmp_82: -0.0043
img_pca_cmp_83: 0.0002
img_pca_cmp_84: 0.0069
img_pca_cmp_85: -0.0008
img_pca_cmp_86: -0.0033
img_pca_cmp_87: -0.0130
img_pca_cmp_88: 0.0046
img_pca_cmp_89: -0.0069
img_pca_cmp_90: -0.0046
img_pca_cmp_91: 0.0048
img_pca_cmp_92: -0.0029
img_pca_cmp_93: -0.0050
img_pca_cmp_94: -0.0030
img_pca_cmp_95: 0.0068
img_pca_cmp_96: -0.0040
img_pca_cmp_97: -0.0057
img_pca_cmp_98: -0.0024
img_pca_cmp_99: 0.0028
node_rgb_blue_channel: 0.0495
num_nodes_edge_width_interaction: -0.1070
str_binary_search_tree: 1982824969812.0718
str_binary_tree: 1103092548414.8538
str_directed_graph: 630809929341.2178
str_undirected_graph: 629528764991.7102
task_adjacency_list: 524839996023.0190
task_breadth_first_search: 458939144184.8689
task_depth_first_search: 1460682131203.9312
task_in_order: 655052761863.8467
task_post_order: -100737165448.4229
task_pre_order: 80296160647.5626
var_id_1: 34850937418.4408
var_id_2: 34879259522.7963
var_id_3: 34680220618.3206
gen_id_1-0: 31910599828.8611
gen_id_1-1: 32750173550.6933
gen_id_1-2: 32223029181.6798
gen_id_2-0: 31820647722.9372
gen_id_2-1: 32399911971.8955
gen_id_2-2: 32487911810.3821
gen_id_3-0: 31730385724.1037
gen_id_3-1: 31865662348.2528
gen_id_3-2: 32443948437.4470
gen_id_4-0: 32355802115.0813
gen_id_4-1: 32178622733.0575
gen_id_4-2: 32923589617.0352
gen_id_5-0: 31865662348.0912
gen_id_5-1: 32487911810.1945
gen_id_5-2: 31955460490.0361
gen_id_6-0: 32178622732.8466
gen_id_6-1: 32531802386.6340
gen_id_6-2: 32966768078.9081
gen_id_7-0: 31955460489.8117
gen_id_7-1: 32267361023.4821
gen_id_7-2: 31865662347.9382
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the directed graph.': -487030506927.5319
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the undirected graph.': -106391175151.5787
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the directed graph starting from the vertex with the smallest value.': 186924002820.5537
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the undirected graph starting from the vertex with the smallest value.': 427435620029.3424
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the directed graph starting from the vertex with the smallest value.': -206991280145.4937
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the undirected graph starting from the vertex with the smallest value.': 75257236380.6111
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary search tree.': 469498983547.5479
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary tree.': 865789774523.7822
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary search tree.': 685790695704.7156
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary tree.': 959766111813.5135
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary search tree.': 371214393966.4134
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary tree.': 709385188092.4176
txt_prompt_svd_0: -994159954354.1512
txt_prompt_svd_1: 114719170735.6935
txt_prompt_svd_2: -17437889721.7515
txt_prompt_svd_3: 29414525634.0818
txt_prompt_svd_4: -525885688360.1949
txt_prompt_svd_5: 404089369750.4092
txt_prompt_svd_6: -210794422755.4460
txt_prompt_svd_7: -217702358168.9242
txt_prompt_svd_8: 382318183864.8671
txt_prompt_svd_9: -886692882158.8813
txt_prompt_svd_10: 271885610982.3323
txt_prompt_svd_11: -198132067069.8954
txt_prompt_svd_12: 429381098444.1500
txt_prompt_svd_13: 129400877276.5123
txt_prompt_svd_14: 287206590325.1353
txt_prompt_svd_15: 28546171735.9118
txt_prompt_svd_16: 42946853037.3409
txt_prompt_svd_17: -51868789840.0660
txt_prompt_svd_18: 188666948272.9659
txt_prompt_svd_19: 275557890849.7405

Feature importances for Logistic Regression:
img_pca_cmp_4: 1.7465
density_bin_5: 1.2280
img_pca_cmp_6: 1.1428
img_pca_cmp_52: 0.9724
img_pca_cmp_3: 0.8638
gen_id_5-0: 0.8597
img_pca_cmp_9: 0.8035
gen_id_4-2: 0.7717
img_pca_cmp_26: 0.7604
out_degree_hist_5: 0.7516
gen_id_4-1: 0.7469
gen_id_5-1: 0.7209
num_edges_3: 0.7201
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the undirected graph starting from the vertex with the smallest value.': 0.7195
img_pca_cmp_8: 0.7100
num_edges_12: 0.6529
img_pca_cmp_32: 0.6494
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the undirected graph.': 0.5942
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the directed graph.': 0.5900
img_pca_cmp_5: 0.5782
num_edges_2: 0.5688
img_pca_cmp_14: 0.5660
num_edges_7: 0.5427
num_edges_16: 0.5397
img_pca_cmp_34: 0.5392
img_pca_cmp_22: 0.5354
img_pca_cmp_25: 0.5206
gen_id_2-0: 0.5179
in_degree_hist_3: 0.5062
in_degree_hist_6: 0.4983
gen_id_6-1: 0.4908
density_bin_4: 0.4810
img_pca_cmp_18: 0.4638
in_degree_hist_5: 0.4622
img_pca_cmp_11: 0.4612
img_pca_cmp_42: 0.4605
img_pca_cmp_24: 0.4478
density_bin_6: 0.4443
img_pca_cmp_16: 0.4357
task_breadth_first_search: 0.4297
in_degree_hist_9: 0.4172
img_pca_cmp_7: 0.4165
gen_id_4-0: 0.4124
num_edges_9: 0.4072
txt_prompt_svd_11: 0.4024
img_pca_cmp_41: 0.4016
gen_id_1-2: 0.3999
gen_id_6-2: 0.3968
img_pca_cmp_21: 0.3966
txt_prompt_svd_1: 0.3902
gen_id_2-1: 0.3801
img_pca_cmp_40: 0.3776
txt_prompt_svd_8: 0.3757
img_pca_cmp_74: 0.3714
img_pca_cmp_77: 0.3648
txt_prompt_svd_15: 0.3615
img_pca_cmp_35: 0.3574
out_degree_hist_9: 0.3567
img_pca_cmp_15: 0.3556
txt_prompt_svd_9: 0.3522
img_pca_cmp_13: 0.3460
gen_id_7-2: 0.3396
img_pca_cmp_37: 0.3388
img_pca_cmp_47: 0.3352
txt_prompt_svd_0: 0.3282
num_edges_4: 0.3258
img_pca_cmp_62: 0.3250
str_directed_graph: 0.3196
img_pca_cmp_84: 0.3143
num_edges_8: 0.3119
img_pca_cmp_45: 0.2970
avg_degree_bin_1: 0.2965
num_edges_24: 0.2965
avg_degree_bin_2: 0.2965
img_pca_cmp_99: 0.2963
density_bin_1: 0.2857
img_pca_cmp_49: 0.2742
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary tree.': 0.2711
img_pca_cmp_93: 0.2702
out_degree_hist_0: 0.2682
img_pca_cmp_20: 0.2640
img_pca_cmp_58: 0.2618
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary search tree.': 0.2608
img_pca_cmp_51: 0.2512
img_pca_cmp_98: 0.2504
task_pre_order: 0.2468
txt_prompt_svd_5: 0.2463
txt_prompt_svd_14: 0.2456
img_pca_cmp_66: 0.2446
img_pca_cmp_30: 0.2425
gen_id_1-1: 0.2418
img_pca_cmp_67: 0.2384
img_pca_cmp_55: 0.2374
img_pca_cmp_83: 0.2348
img_pca_cmp_2: 0.2342
img_pca_cmp_50: 0.2330
str_binary_search_tree: 0.2291
gen_id_3-1: 0.2291
density_bin_3: 0.2283
img_pca_cmp_17: 0.2237
txt_prompt_svd_12: 0.2229
gen_id_7-1: 0.2176
img_pca_cmp_28: 0.2148
img_pca_cmp_68: 0.2082
img_pca_cmp_0: 0.2076
img_pca_cmp_46: 0.2041
gen_id_5-2: 0.2041
img_pca_cmp_63: 0.1978
out_degree_hist_6: 0.1879
img_pca_cmp_91: 0.1870
str_binary_tree: 0.1842
img_pca_cmp_23: 0.1811
gen_id_1-0: 0.1804
img_pca_cmp_76: 0.1751
img_pca_cmp_43: 0.1740
num_edges_6: 0.1718
img_pca_cmp_61: 0.1714
edge_width_1: 0.1706
edge_width_5: 0.1706
txt_prompt_svd_4: 0.1698
num_nodes_4: 0.1691
task_in_order: 0.1619
img_pca_cmp_36: 0.1607
img_pca_cmp_86: 0.1607
img_pca_cmp_12: 0.1604
img_pca_cmp_27: 0.1603
txt_prompt_svd_16: 0.1578
density_bin_2: 0.1577
img_pca_cmp_95: 0.1575
img_pca_cmp_90: 0.1530
img_pca_cmp_44: 0.1527
img_pca_cmp_38: 0.1515
img_pca_cmp_92: 0.1467
img_pca_cmp_78: 0.1460
num_nodes_edge_width_interaction: 0.1421
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the directed graph starting from the vertex with the smallest value.': 0.1412
gen_id_6-0: 0.1409
img_pca_cmp_94: 0.1365
img_pca_cmp_56: 0.1354
img_pca_cmp_65: 0.1330
img_pca_cmp_60: 0.1319
gen_id_7-0: 0.1254
img_pca_cmp_70: 0.1240
num_nodes_8: 0.1215
txt_prompt_svd_19: 0.1176
txt_prompt_svd_3: 0.1161
img_pca_cmp_10: 0.1133
node_rgb_blue_channel: 0.1106
img_pca_cmp_57: 0.1080
in_degree_hist_0: 0.1038
gen_id_3-0: 0.1030
img_pca_cmp_89: 0.1025
img_pca_cmp_73: 0.1011
img_pca_cmp_31: 0.0977
img_pca_cmp_64: 0.0975
img_pca_cmp_85: 0.0950
str_undirected_graph: 0.0940
in_degree_hist_2: 0.0936
out_degree_hist_7: 0.0936
in_degree_hist_7: 0.0936
out_degree_hist_2: 0.0936
txt_prompt_svd_13: 0.0918
num_edges_20: 0.0912
img_pca_cmp_1: 0.0905
img_pca_cmp_80: 0.0890
gen_id_2-2: 0.0864
num_nodes_9: 0.0827
img_pca_cmp_97: 0.0802
txt_prompt_svd_2: 0.0777
img_pca_cmp_82: 0.0735
img_pca_cmp_19: 0.0730
task_post_order: 0.0710
img_pca_cmp_54: 0.0651
txt_prompt_svd_7: 0.0648
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary search tree.': 0.0629
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary tree.': 0.0616
num_edges_5: 0.0588
num_nodes_6: 0.0586
num_edges_10: 0.0539
num_edges_14: 0.0539
txt_prompt_svd_18: 0.0523
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the directed graph starting from the vertex with the smallest value.': 0.0495
task_depth_first_search: 0.0494
img_pca_cmp_79: 0.0488
gen_id_3-2: 0.0468
img_pca_cmp_75: 0.0464
img_pca_cmp_87: 0.0445
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary tree.': 0.0424
num_nodes_5: 0.0422
img_pca_cmp_33: 0.0371
img_pca_cmp_39: 0.0359
num_nodes_7: 0.0353
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary search tree.': 0.0342
out_degree_hist_3: 0.0329
img_pca_cmp_69: 0.0319
num_nodes_10: 0.0312
var_id_1: 0.0306
img_pca_cmp_72: 0.0300
img_pca_cmp_53: 0.0297
var_id_3: 0.0185
txt_prompt_svd_17: 0.0182
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the undirected graph starting from the vertex with the smallest value.': 0.0172
img_pca_cmp_29: 0.0157
img_pca_cmp_81: 0.0122
var_id_2: 0.0121
img_pca_cmp_96: 0.0088
img_pca_cmp_59: 0.0082
img_pca_cmp_88: 0.0067
img_pca_cmp_48: 0.0064
txt_prompt_svd_10: 0.0053
txt_prompt_svd_6: 0.0037
task_adjacency_list: 0.0008
img_pca_cmp_71: 0.0002
Regression Metrics: {'mse': 0.03393380523254551, 'r2': 0.7085513891657395, 'y_test': 447     0.500000
7195    0.000000
6473    0.125000
1400    0.428571
5281    0.850000
          ...   
4313    0.777778
6660    0.555556
6930    0.333333
7930    0.000000
1244    1.000000
Name: similarity, Length: 1815, dtype: float64, 'y_pred': array([0.67298413, 0.30213062, 0.21106046, ..., 0.3642644 , 0.09973804,
       0.8014021 ])}
Classification Metrics: {'accuracy': 0.8738292011019284, 'precision': 0.811377245508982, 'recall': 0.8403100775193798, 'f1': 0.8255902513328257, 'y_test': 447     False
7195    False
6473    False
1400    False
5281    False
        ...  
4313    False
6660    False
6930    False
7930    False
1244     True
Name: match, Length: 1815, dtype: bool, 'y_pred': array([False, False, False, ..., False, False, False]), 'y_pred_prob': array([3.04630901e-01, 9.10861718e-03, 4.21337464e-06, ...,
       7.41137557e-03, 7.62757931e-08, 4.41401988e-01])}
