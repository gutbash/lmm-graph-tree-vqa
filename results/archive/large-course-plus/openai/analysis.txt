
Top contributing terms for text_prompt_svd_4:
density_bin_3: 0.7071067811865495
num_nodes_7: 3.924048360751527e-14
num_nodes_8: 9.499797454320909e-15
num_nodes_4: 9.46106447256568e-15
num_edges_7: 5.076341120722237e-15
density_bin_4: 2.461408876080063e-15
density_bin_5: 2.461408876080063e-15
num_edges_20: 2.454469982176156e-15
num_edges_24: 2.454469982176156e-15
num_nodes_10: 1.9607406475028942e-15

Bottom contributing terms for text_prompt_svd_4:
num_edges_14: -5.471126455270772e-16
num_edges_2: -3.1947159820189675e-15
num_edges_4: -3.541660677214329e-15
num_edges_9: -3.541660677214329e-15
num_edges_10: -3.541660677214329e-15
num_edges_12: -3.541660677214329e-15
num_edges_16: -3.541660677214329e-15
num_edges_8: -5.420822886367388e-15
num_nodes_6: -4.0539511580554727e-14
num_nodes_9: -0.7071067811865459
Training Regression Metrics: {'mse': 0.028455575783613084, 'r2': 0.7550358350941295}
Training Classification Metrics: {'accuracy': 0.9175968030866749, 'precision': 0.9126074498567335, 'recall': 0.9157561817136285, 'f1': 0.9141791044776119}
Feature importances for Linear Regression:
num_nodes_4: -5229159184.5292
num_nodes_5: -15554637658.7876
num_nodes_6: -27449117618.0334
num_nodes_7: -39652848421.6173
num_nodes_8: -54067927176.9656
num_nodes_9: -75717534328.7145
num_nodes_10: -124673098983.3531
num_edges_2: 57266509729.0471
num_edges_3: 54662619201.4482
num_edges_4: 167403664347.1448
num_edges_5: 58522918478.4365
num_edges_6: 160424374016.8032
num_edges_7: 134196645033.8878
num_edges_8: 175736213852.3002
num_edges_9: 56304849222.6028
num_edges_10: 176360274637.3507
num_edges_12: 167232934133.7909
num_edges_14: 174950363068.7773
num_edges_16: 162686731016.3542
num_edges_20: 79595764424.8012
num_edges_24: -33924716364.2589
density_bin_1: -148513713517.0010
density_bin_2: -197264207044.5945
density_bin_3: -149176594972.9735
density_bin_4: -83290398624.9253
density_bin_5: -93692601672.0096
density_bin_6: -72949176616.5722
avg_degree_bin_1: -35653651114.8526
avg_degree_bin_2: 55218916138.1059
in_degree_hist_0: 1907956019.6750
in_degree_hist_2: 1497274796220.3259
in_degree_hist_3: 1929467434.1490
in_degree_hist_5: 1737197692.5546
in_degree_hist_6: 1838997725.6176
in_degree_hist_7: -672688160995.2052
in_degree_hist_9: 1830610005.3475
out_degree_hist_0: 62267449021.8278
out_degree_hist_2: -439582610397.7993
out_degree_hist_3: 65336666501.4620
out_degree_hist_5: 51476350545.4968
out_degree_hist_6: 61242312404.1979
out_degree_hist_7: -366412505161.4861
out_degree_hist_9: 61863915435.0479
edge_width_1: -180500527947.4371
edge_width_5: -180500527947.2597
img_pca_cmp_0: -0.2097
img_pca_cmp_1: 0.1957
img_pca_cmp_2: -0.0340
img_pca_cmp_3: -0.0338
img_pca_cmp_4: 0.1740
img_pca_cmp_5: -0.0349
img_pca_cmp_6: -0.0193
img_pca_cmp_7: -0.0134
img_pca_cmp_8: 0.0124
img_pca_cmp_9: 0.0544
img_pca_cmp_10: -0.0707
img_pca_cmp_11: -0.0058
img_pca_cmp_12: -0.0362
img_pca_cmp_13: -0.0388
img_pca_cmp_14: 0.0141
img_pca_cmp_15: 0.0443
img_pca_cmp_16: -0.0394
img_pca_cmp_17: -0.0125
img_pca_cmp_18: 0.0177
img_pca_cmp_19: 0.0171
img_pca_cmp_20: -0.0122
img_pca_cmp_21: -0.0309
img_pca_cmp_22: 0.0553
img_pca_cmp_23: 0.0098
img_pca_cmp_24: 0.0087
img_pca_cmp_25: -0.0542
img_pca_cmp_26: 0.0327
img_pca_cmp_27: -0.0336
img_pca_cmp_28: 0.0395
img_pca_cmp_29: 0.0161
img_pca_cmp_30: 0.0123
img_pca_cmp_31: 0.0414
img_pca_cmp_32: -0.0011
img_pca_cmp_33: 0.0012
img_pca_cmp_34: -0.0155
img_pca_cmp_35: -0.0099
img_pca_cmp_36: -0.0131
img_pca_cmp_37: -0.0372
img_pca_cmp_38: -0.0056
img_pca_cmp_39: -0.0068
img_pca_cmp_40: -0.0014
img_pca_cmp_41: 0.0188
img_pca_cmp_42: 0.0083
img_pca_cmp_43: 0.0175
img_pca_cmp_44: -0.0332
img_pca_cmp_45: -0.0052
img_pca_cmp_46: -0.0106
img_pca_cmp_47: 0.0102
img_pca_cmp_48: 0.0325
img_pca_cmp_49: -0.0069
img_pca_cmp_50: -0.0182
img_pca_cmp_51: 0.0067
img_pca_cmp_52: 0.0180
img_pca_cmp_53: -0.0117
img_pca_cmp_54: 0.0167
img_pca_cmp_55: -0.0172
img_pca_cmp_56: -0.0279
img_pca_cmp_57: -0.0005
img_pca_cmp_58: -0.0040
img_pca_cmp_59: 0.0003
img_pca_cmp_60: -0.0017
img_pca_cmp_61: -0.0188
img_pca_cmp_62: 0.0151
img_pca_cmp_63: 0.0013
img_pca_cmp_64: -0.0084
img_pca_cmp_65: 0.0038
img_pca_cmp_66: 0.0008
img_pca_cmp_67: -0.0000
img_pca_cmp_68: 0.0064
img_pca_cmp_69: -0.0280
img_pca_cmp_70: 0.0087
img_pca_cmp_71: 0.0207
img_pca_cmp_72: -0.0045
img_pca_cmp_73: -0.0026
img_pca_cmp_74: 0.0017
img_pca_cmp_75: -0.0030
img_pca_cmp_76: -0.0115
img_pca_cmp_77: 0.0053
img_pca_cmp_78: -0.0084
img_pca_cmp_79: -0.0158
img_pca_cmp_80: -0.0199
img_pca_cmp_81: -0.0015
img_pca_cmp_82: 0.0078
img_pca_cmp_83: 0.0052
img_pca_cmp_84: -0.0126
img_pca_cmp_85: 0.0036
img_pca_cmp_86: -0.0046
img_pca_cmp_87: 0.0035
img_pca_cmp_88: -0.0003
img_pca_cmp_89: -0.0015
img_pca_cmp_90: -0.0043
img_pca_cmp_91: 0.0024
img_pca_cmp_92: 0.0058
img_pca_cmp_93: -0.0071
img_pca_cmp_94: 0.0030
img_pca_cmp_95: 0.0064
img_pca_cmp_96: -0.0040
img_pca_cmp_97: 0.0102
img_pca_cmp_98: 0.0074
img_pca_cmp_99: 0.0044
node_rgb_blue_channel: 0.2769
num_nodes_edge_width_interaction: -0.0731
str_binary_search_tree: 96668078682.8439
str_binary_tree: -1254537552935.9683
str_directed_graph: -235242141567.9635
str_undirected_graph: -442549454297.1820
task_adjacency_list: 399874498279.2220
task_breadth_first_search: -303867129028.4156
task_depth_first_search: 73707148541.0197
task_in_order: 354432107820.4476
task_post_order: -305973820086.1210
task_pre_order: -118854944829.8405
var_id_1: 57390722098.4718
var_id_2: 57728019194.2928
var_id_3: 57774786143.1491
gen_id_1-0: 71603820989.1477
gen_id_1-1: 72302708429.2536
gen_id_1-2: 72500881760.8708
gen_id_2-0: 72796905001.3536
gen_id_2-1: 72993437125.8627
gen_id_2-2: 70794792097.0788
gen_id_3-0: 71402606862.1888
gen_id_3-1: 71503299991.5329
gen_id_3-2: 72599720401.6224
gen_id_4-0: 72599720401.5946
gen_id_4-1: 72401877995.9596
gen_id_4-2: 72203372376.8590
gen_id_5-0: 71099487362.8474
gen_id_5-1: 71904358402.5936
gen_id_5-2: 73481947172.0242
gen_id_6-0: 72895252292.3373
gen_id_6-1: 72698394591.9676
gen_id_6-2: 72401877995.6988
gen_id_7-0: 73579170845.0311
gen_id_7-1: 71503299991.0898
gen_id_7-2: 72103869150.8967
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the directed graph.': -29763253152.3733
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the undirected graph.': -136861438730.8958
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the directed graph starting from the vertex with the smallest value.': 16323737441.3041
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the undirected graph starting from the vertex with the smallest value.': -68159564852.1368
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the directed graph starting from the vertex with the smallest value.': -92574876004.8301
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the undirected graph starting from the vertex with the smallest value.': -197801119576.6647
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary search tree.': -45894899727.5151
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary tree.': 352027573858.9943
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary search tree.': 233902731580.5938
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary tree.': 686589955505.0258
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary search tree.': 52325157608.3554
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary tree.': 406852563876.1868
txt_prompt_svd_0: -470445137590.7789
txt_prompt_svd_1: 361589197467.1517
txt_prompt_svd_2: -223903408049.9917
txt_prompt_svd_3: -17156131326.2035
txt_prompt_svd_4: 36335727913.9062
txt_prompt_svd_5: -35644215407.7501
txt_prompt_svd_6: 7300527122.9427
txt_prompt_svd_7: 186902208772.1373
txt_prompt_svd_8: 408633340548.3745
txt_prompt_svd_9: 22576033202.7076
txt_prompt_svd_10: 2753210149.9022
txt_prompt_svd_11: 238696037053.8794
txt_prompt_svd_12: -262698650500.7304
txt_prompt_svd_13: 261555297134.3004
txt_prompt_svd_14: 95079185787.7721
txt_prompt_svd_15: 440236126082.6609
txt_prompt_svd_16: 369881285.2768
txt_prompt_svd_17: -114259390327.2302
txt_prompt_svd_18: 176948937258.2422
txt_prompt_svd_19: -237295699975.0923

Feature importances for Logistic Regression:
img_pca_cmp_4: 2.0528
density_bin_5: 1.9122
out_degree_hist_5: 1.8517
img_pca_cmp_5: 1.4278
node_rgb_blue_channel: 1.2245
num_edges_20: 1.1952
out_degree_hist_9: 1.0719
img_pca_cmp_1: 1.0711
num_nodes_edge_width_interaction: 1.0685
img_pca_cmp_21: 1.0417
gen_id_2-1: 0.9962
in_degree_hist_9: 0.9818
in_degree_hist_3: 0.9531
img_pca_cmp_8: 0.9481
img_pca_cmp_22: 0.8759
img_pca_cmp_16: 0.8236
num_edges_9: 0.8209
num_nodes_7: 0.7850
in_degree_hist_0: 0.7676
density_bin_2: 0.7630
gen_id_1-0: 0.7552
density_bin_4: 0.7195
img_pca_cmp_3: 0.6879
num_nodes_5: 0.6759
img_pca_cmp_14: 0.6659
str_directed_graph: 0.6599
gen_id_2-0: 0.6563
img_pca_cmp_35: 0.6489
img_pca_cmp_12: 0.6304
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the directed graph.': 0.5862
img_pca_cmp_46: 0.5860
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary search tree.': 0.5822
num_edges_5: 0.5714
out_degree_hist_6: 0.5604
txt_prompt_svd_4: 0.5492
in_degree_hist_7: 0.5490
out_degree_hist_7: 0.5490
out_degree_hist_2: 0.5490
in_degree_hist_2: 0.5490
out_degree_hist_0: 0.5424
density_bin_6: 0.4769
img_pca_cmp_30: 0.4676
str_binary_search_tree: 0.4624
img_pca_cmp_84: 0.4596
gen_id_4-1: 0.4545
txt_prompt_svd_10: 0.4510
gen_id_7-1: 0.4471
num_edges_6: 0.4385
txt_prompt_'Provide a single-line Python list[int] representing the in-order traversal for the image of the binary tree.': 0.4345
img_pca_cmp_23: 0.4209
num_edges_12: 0.4199
gen_id_3-0: 0.4176
gen_id_7-2: 0.4083
num_edges_2: 0.4012
txt_prompt_svd_12: 0.3974
txt_prompt_svd_0: 0.3842
num_nodes_8: 0.3841
gen_id_6-0: 0.3820
num_edges_24: 0.3784
avg_degree_bin_2: 0.3784
avg_degree_bin_1: 0.3784
img_pca_cmp_17: 0.3756
img_pca_cmp_62: 0.3713
img_pca_cmp_37: 0.3697
num_nodes_4: 0.3656
img_pca_cmp_31: 0.3652
img_pca_cmp_25: 0.3599
gen_id_7-0: 0.3596
in_degree_hist_5: 0.3588
img_pca_cmp_71: 0.3579
edge_width_5: 0.3574
edge_width_1: 0.3574
txt_prompt_svd_1: 0.3537
img_pca_cmp_28: 0.3522
txt_prompt_svd_7: 0.3501
img_pca_cmp_33: 0.3452
img_pca_cmp_53: 0.3423
density_bin_1: 0.3423
img_pca_cmp_29: 0.3362
txt_prompt_'Provide a single-line Python dict[int, list[int]] representing the adjacency list for the image of the undirected graph.': 0.3267
img_pca_cmp_6: 0.3191
num_edges_7: 0.3183
img_pca_cmp_61: 0.2989
img_pca_cmp_2: 0.2950
txt_prompt_svd_16: 0.2912
gen_id_5-2: 0.2887
txt_prompt_svd_19: 0.2834
img_pca_cmp_82: 0.2821
img_pca_cmp_65: 0.2768
img_pca_cmp_36: 0.2712
num_nodes_10: 0.2640
img_pca_cmp_94: 0.2608
img_pca_cmp_26: 0.2605
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the directed graph starting from the vertex with the smallest value.': 0.2590
img_pca_cmp_20: 0.2583
img_pca_cmp_45: 0.2581
img_pca_cmp_7: 0.2561
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary tree.': 0.2548
img_pca_cmp_11: 0.2483
gen_id_5-0: 0.2463
gen_id_1-2: 0.2436
gen_id_6-1: 0.2428
txt_prompt_svd_13: 0.2427
img_pca_cmp_86: 0.2414
num_edges_16: 0.2396
img_pca_cmp_9: 0.2375
img_pca_cmp_51: 0.2364
img_pca_cmp_72: 0.2328
img_pca_cmp_69: 0.2290
img_pca_cmp_39: 0.2266
img_pca_cmp_44: 0.2263
gen_id_6-2: 0.2232
txt_prompt_svd_18: 0.2216
txt_prompt_svd_8: 0.2192
img_pca_cmp_60: 0.2177
img_pca_cmp_24: 0.2173
num_edges_14: 0.2168
str_undirected_graph: 0.2153
img_pca_cmp_76: 0.2123
txt_prompt_svd_17: 0.2056
img_pca_cmp_56: 0.2054
task_pre_order: 0.2048
task_post_order: 0.1970
img_pca_cmp_48: 0.1959
img_pca_cmp_57: 0.1940
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the directed graph starting from the vertex with the smallest value.': 0.1907
task_adjacency_list: 0.1906
img_pca_cmp_58: 0.1881
img_pca_cmp_91: 0.1865
num_nodes_9: 0.1808
task_breadth_first_search: 0.1804
img_pca_cmp_90: 0.1753
img_pca_cmp_49: 0.1743
img_pca_cmp_68: 0.1724
img_pca_cmp_50: 0.1600
num_edges_10: 0.1598
img_pca_cmp_80: 0.1596
out_degree_hist_3: 0.1572
img_pca_cmp_10: 0.1553
img_pca_cmp_77: 0.1516
gen_id_1-1: 0.1516
img_pca_cmp_88: 0.1508
img_pca_cmp_19: 0.1498
img_pca_cmp_97: 0.1455
task_depth_first_search: 0.1454
txt_prompt_svd_2: 0.1439
gen_id_2-2: 0.1424
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary tree.': 0.1419
img_pca_cmp_0: 0.1344
gen_id_4-2: 0.1344
img_pca_cmp_73: 0.1318
img_pca_cmp_43: 0.1312
img_pca_cmp_47: 0.1302
txt_prompt_'Provide a single-line Python list[int] representing the post-order traversal for the image of the binary search tree.': 0.1237
num_edges_4: 0.1225
gen_id_3-1: 0.1220
img_pca_cmp_92: 0.1216
img_pca_cmp_98: 0.1183
task_in_order: 0.1138
img_pca_cmp_83: 0.1125
txt_prompt_svd_15: 0.1120
num_edges_8: 0.1097
var_id_3: 0.1063
img_pca_cmp_66: 0.1053
gen_id_3-2: 0.1041
img_pca_cmp_41: 0.1009
img_pca_cmp_89: 0.0984
var_id_1: 0.0975
img_pca_cmp_93: 0.0882
img_pca_cmp_27: 0.0879
img_pca_cmp_32: 0.0873
img_pca_cmp_79: 0.0865
img_pca_cmp_54: 0.0842
img_pca_cmp_13: 0.0816
img_pca_cmp_87: 0.0815
gen_id_5-1: 0.0809
img_pca_cmp_52: 0.0806
img_pca_cmp_42: 0.0801
img_pca_cmp_64: 0.0781
gen_id_4-0: 0.0774
txt_prompt_svd_9: 0.0756
img_pca_cmp_85: 0.0741
img_pca_cmp_34: 0.0708
img_pca_cmp_18: 0.0693
img_pca_cmp_59: 0.0663
img_pca_cmp_63: 0.0633
img_pca_cmp_15: 0.0615
img_pca_cmp_96: 0.0558
txt_prompt_svd_6: 0.0538
img_pca_cmp_81: 0.0518
img_pca_cmp_70: 0.0499
in_degree_hist_6: 0.0491
img_pca_cmp_99: 0.0490
img_pca_cmp_40: 0.0475
img_pca_cmp_74: 0.0451
img_pca_cmp_78: 0.0444
img_pca_cmp_75: 0.0442
txt_prompt_svd_14: 0.0277
num_nodes_6: 0.0274
img_pca_cmp_67: 0.0269
img_pca_cmp_38: 0.0248
txt_prompt_svd_5: 0.0224
txt_prompt_'Provide a single-line Python list[int] representing the pre-order traversal for the image of the binary search tree.': 0.0202
density_bin_3: 0.0198
txt_prompt_svd_11: 0.0196
img_pca_cmp_55: 0.0191
str_binary_tree: 0.0190
num_edges_3: 0.0180
txt_prompt_'Provide a single-line Python list[int] representing the breadth-first search for the image of the undirected graph starting from the vertex with the smallest value.': 0.0136
var_id_2: 0.0095
img_pca_cmp_95: 0.0091
txt_prompt_svd_3: 0.0077
txt_prompt_'Provide a single-line Python list[int] representing the depth-first search for the image of the undirected graph starting from the vertex with the smallest value.': 0.0036
Regression Metrics: {'mse': 0.03069969835174498, 'r2': 0.7416257816867793, 'y_test': 447     1.000000
7195    0.166667
6473    0.333333
1400    1.000000
5281    0.600000
          ...   
4313    1.000000
6660    0.333333
6930    0.500000
7930    0.400000
1244    0.500000
Name: similarity, Length: 1815, dtype: float64, 'y_pred': array([1.02195651, 0.41031594, 0.28823836, ..., 0.45752663, 0.25442488,
       0.82608015])}
Classification Metrics: {'accuracy': 0.9140495867768595, 'precision': 0.918918918918919, 'recall': 0.8998849252013809, 'f1': 0.9093023255813955, 'y_test': 447      True
7195    False
6473    False
1400     True
5281    False
        ...  
4313     True
6660    False
6930    False
7930    False
1244    False
Name: match, Length: 1815, dtype: bool, 'y_pred': array([ True, False, False, ..., False, False,  True]), 'y_pred_prob': array([9.98730564e-01, 4.24913256e-03, 8.83906169e-21, ...,
       1.02767058e-01, 4.01799159e-03, 5.75053079e-01])}
